version: v2beta1
name: stalker

vars:
  STALKER_ENVIRONMENT: dev

imports:
  - path: devspace.base.yaml
  - path: devspace.dev.yaml
    enabled: $(is_equal ${STALKER_ENVIRONMENT} "dev")

pipelines:
  build:
    run: build_images ui flow-manager

  deploy:
    run: |-
      build_images ui flow-manager orchestrator
      create_deployments mongo ui flow-manager kafka orchestrator-service-account orchestrator --sequential

  dev:
    run: |-
      build_images ui flow-manager orchestrator
      create_deployments mongo kafka --sequential

      # Start mongo and kafka
      start_dev mongo kafka
      # Wait for kafka and mongo to be ready
      wait_pod --label-selector app.kubernetes.io/component=mongo
      wait_pod --label-selector app.kubernetes.io/component=kafka
      wait_pod --label-selector app.kubernetes.io/component=zookeeper

      create_deployments ui flow-manager orchestrator-service-account orchestrator --sequential

      # Start microservices + ui
      start_dev orchestrator flow-manager ui

  flow-manager-e2e:
    flags:
      - name: watch
        short: w
        type: bool
    run: |-
      build_images flow-manager-e2e orchestrator
      create_deployments mongo kafka orchestrator-service-account orchestrator flow-manager-e2e --sequential

      # Wait for kafka and mongo to be ready
      wait_pod --label-selector app.kubernetes.io/component=mongo
      wait_pod --label-selector app.kubernetes.io/component=kafka
      wait_pod --label-selector app.kubernetes.io/component=zookeeper

      # Run tests

      if [ $(get_flag "watch") == "true" ]; 
      then
        echo "Running tests in watch mode."
        start_dev flow-manager-e2e mongo
        exec_container --label-selector app.kubernetes.io/component=flow-manager-e2e -n stalker -- /bin/sh -c 'npm run test:e2e:watch'
      else
        echo "Running tests in ci mode."
        start_dev flow-manager-e2e
        exec_container --label-selector app.kubernetes.io/component=flow-manager-e2e -n stalker -- /bin/sh -c 'npm run test:e2e:cicd' || true
      fi

      exec_container --label-selector app.kubernetes.io/component=flow-manager-e2e -n stalker -- /bin/sh -c 'echo "Sleeping while the test results are synced."'
      exec_container --label-selector app.kubernetes.io/component=flow-manager-e2e -n stalker -- /bin/sh -c 'sleep 10'
      stop_dev --all
  purge:
    run: |-
      stop_dev --all
      purge_deployments mongo ui flow-manager flow-manager-e2e kafka orchestrator-service-account orchestrator --sequential

images:
  flow-manager:
    image: flow_manager
    dockerfile: flow_manager/Dockerfile.dev
    context: flow_manager
    rebuildStrategy: default

  flow-manager-e2e:
    image: flow_manager_e2e
    dockerfile: flow_manager/Dockerfile.dev
    context: flow_manager
    rebuildStrategy: always

  ui:
    image: ui
    dockerfile: stalker_ui/Dockerfile.dev
    context: stalker_ui
    rebuildStrategy: default

  orchestrator:
    image: orchestrator
    dockerfile: orchestrator/Dockerfile.dev
    context: orchestrator
    rebuildStrategy: default

deployments:
  flow-manager:
    helm:
      values:
        containers:
          - env:
              - name: MONGO_ADDRESS
                value: ${FM_MONGO_ADDRESS}
              - name: MONGO_DATABASE_NAME
                value: ${FM_MONGO_DATABASE_NAME}
              - name: FM_JWT_SECRET
                value: ${FM_JWT_SECRET}
              - name: FM_REFRESH_SECRET
                value: ${FM_REFRESH_SECRET}
              - name: KAFKA_URI
                value: ${KAFKA_URI}
              - name: STALKER_URL
                value: ${STALKER_URL}

            image: flow_manager
            name: flow-manager-container

        service:
          ports:
            - containerPort: 3000
              port: 3000
              protocol: TCP

  flow-manager-e2e:
    helm:
      values:
        containers:
          - image: flow_manager_e2e
            name: flow-manager-container-e2e
            env:
              - name: TESTS
                value: "true"
              - name: MONGO_ADDRESS
                value: ${FM_MONGO_ADDRESS}
              - name: MONGO_DATABASE_NAME
                value: stalker-flow-manager-e2e
              - name: FM_JWT_SECRET
                value: ${FM_JWT_SECRET}
              - name: FM_REFRESH_SECRET
                value: ${FM_REFRESH_SECRET}
              - name: KAFKA_URI
                value: ${KAFKA_URI}
              - name: FEATURE_ORCHESTRATOR_ENABLED
                value: "true"
              - name: STALKER_URL
                value: ${STALKER_URL}

        service:
          ports:
            - containerPort: 3000
              port: 3000
              protocol: TCP

  ui:
    helm:
      values:
        containers:
          - env:

            image: ui
            name: ui-container

        service:
          ports:
            - containerPort: 4200
              port: 4200
              protocol: TCP
  mongo:
    helm:
      chart:
        name: mongodb
        repo: https://charts.bitnami.com/bitnami
      values:
        architecture: standalone
        service:
          ports:
            mongodb: 27017
        auth:
          rootPassword: ${MONGO_ROOT_PASSWORD}

  kafka:
    helm:
      chart:
        name: kafka
        repo: https://charts.bitnami.com/bitnami

  orchestrator-service-account:
    kubectl:
      manifests:
        - orchestrator/orchestrator-service-account.yml

  orchestrator:
    helm:
      values:
        serviceAccountName: orchestrator-service-account
        containers:
          - env:
              - name: JobsQueue__QueueUri
                value: ${KAFKA_URI}

            image: orchestrator
            name: orchestrator-container

        service:
          ports:
            - containerPort: 5135
              port: 5135
              protocol: TCP

dev:
  mongo:
    labelSelector:
      app.kubernetes.io/component: mongodb
    ports:
      - port: "27017"

  kafka:
    labelSelector:
      app.kubernetes.io/component: kafka
    ports:
      - port: "9092"

  flow-manager:
    labelSelector:
      app.kubernetes.io/component: flow-manager
    container: flow-manager-container
    logs:
      enabled: true
    sync:
      - path: ./flow_manager/src/:/app/src/
        disableDownload: true
    restartHelper:
      inject: false
    ports:
      - port: "3000"

  flow-manager-e2e:
    labelSelector:
      app.kubernetes.io/component: flow-manager-e2e
    container: flow-manager-container-e2e
    logs:
      enabled: true
    sync:
      - path: ./flow_manager/src/:/app/src/
        disableDownload: true
      - path: ./flow_manager/test/jest-output-e2e.json:/app/test/jest-output-e2e.json
        disableUpload: true
        file: true
    restartHelper:
      inject: false
    ports:
      - port: "9229"

  ui:
    labelSelector:
      app.kubernetes.io/component: ui
    container: ui-container
    sync:
      - path: ./stalker_ui/src/:/app/src/
        disableDownload: true
    restartHelper:
      inject: false
    ports:
      - port: "4200"

  orchestrator:
    labelSelector:
      app.kubernetes.io/component: orchestrator
    container: orchestrator-container
    sync:
      - path: ./orchestrator/:/app/
        disableDownload: true
    restartHelper:
      inject: false
    ports:
      - port: "5135"

hooks:
  - events:
      - after:deploy:mongo
    wait:
      running: true
      terminatedWithCode: 0
    container:
      labelSelector:
        app.kubernetes.io/component: mongo
      containerName: mongo-container

  - events:
      - after:deploy:flow-manager
    wait:
      running: true
      terminatedWithCode: 0
    container:
      labelSelector:
        app.kubernetes.io/component: flow-manager
      containerName: flow-manager-container

  - events:
      - after:deploy:ui
    wait:
      running: true
      terminatedWithCode: 0
    container:
      labelSelector:
        app.kubernetes.io/component: ui
      containerName: ui-container

  - events:
      - after:deploy:orchestrator
    wait:
      running: true
      terminatedWithCode: 0
    container:
      labelSelector:
        app.kubernetes.io/component: orchestrator
      containerName: orchestrator-container

  - events:
      - after:deploy:kafka
    wait:
      running: true
      terminatedWithCode: 0
    container:
      labelSelector:
        app.kubernetes.io/component: kafka
      containerName: kafka-container
